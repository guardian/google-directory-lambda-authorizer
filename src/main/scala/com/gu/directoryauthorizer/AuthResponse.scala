package com.gu.directoryauthorizer

import com.amazonaws.auth.policy.Statement.Effect
import com.amazonaws.auth.policy.{Policy, Resource, Statement, Action => AWSAction}

// response from a custom API Gateway authorizer.
// https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-lambda-authorizer-output.html
// This is not written as an `Encoder` as I couldn't find a straightforward way to embed the JSON string
// generated by `Policy.toJson` without circe escaping everything. Manual interpolation ended up being simpler.
case class AuthResponse(principalId: String, policyDocument: Policy) {
  val json: String =
    s"""
       |{
       |  "principalId": "$principalId",
       |  "policyDocument": ${policyDocument.toJson}
       |}
     """.stripMargin
}

object AuthResponse {

  case class Action(name: String) extends AWSAction {
    override def getActionName: String = name
  }

  object Action {
    val invoke = Action("execute-api:Invoke")
  }

  def allowMethodInvoke(principalId: String, methodArn: String): AuthResponse = {
    val statement = new Statement(Effect.Allow)
      .withActions(Action.invoke)
      .withResources(new Resource(methodArn))

    AuthResponse(principalId, new Policy().withStatements(statement))
  }

  def denyAll(principalId: String): AuthResponse = {
    val statement = new Statement(Effect.Deny)
      .withActions(Action("*"))
      .withResources(new Resource("*"))

    AuthResponse(principalId, new Policy().withStatements(statement))
  }
}
